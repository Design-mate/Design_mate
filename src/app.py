# -*- coding: utf-8 -*-
"""API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/133oPJsA33o6cE9XJ802bJ-rKXyUovj8_
"""

import subprocess

# Define the required packages
required_packages = [
    'pandas',
    'numpy',
    'scikit-learn',
    'nltk',
    'joblib',
    'Flask'
]

# Install the required packages
for package in required_packages:
    try:
        subprocess.check_call(['pip', 'install', package])
        print(f'Successfully installed {package}')
    except subprocess.CalledProcessError:
        print(f'Error installing {package}')

import pandas as pd
import numpy as np
import json
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from nltk.chat.util import Chat, reflections
from sklearn.impute import SimpleImputer
from joblib import dump
import random
from flask import Flask, request, jsonify

# Load the furniture category datasets into pandas dataframes
bed_df = pd.read_csv('bed.csv', encoding="ISO-8859-1")
chair_df = pd.read_csv('chair.csv', encoding="ISO-8859-1")
table_df = pd.read_csv('table.csv', encoding="ISO-8859-1")
wardrobe_df = pd.read_csv('wardrobe.csv', encoding="ISO-8859-1")

# Preprocess the data by dropping irrelevant columns and handling missing values
bed_df = bed_df.drop(['Response Id'], axis=1).dropna()
chair_df = chair_df.drop(['Response Id'], axis=1).dropna()
table_df = table_df.drop(['Response Id'], axis=1).dropna()
wardrobe_df = wardrobe_df.drop(['Response Id'], axis=1).dropna()

# Split each dataset into training and testing sets
bed_train, bed_test = train_test_split(bed_df, test_size=0.2, random_state=42)
chair_train, chair_test = train_test_split(chair_df, test_size=0.2, random_state=42)
table_train, table_test = train_test_split(table_df, test_size=0.2, random_state=42)
wardrobe_train, wardrobe_test = train_test_split(wardrobe_df, test_size=0.2, random_state=42)

# Split the dataset into features and target variable
bed_X = bed_train.drop(columns=['Personality', 'image'])
bed_y = bed_train['Personality']

chair_X = chair_train.drop(columns=['Personality', 'image'])
chair_y = chair_train['Personality']

table_X = table_train.drop(columns=['Personality', 'image'])
table_y = table_train['Personality']

wardrobe_X = wardrobe_train.drop(columns=['Personality', 'image'])
wardrobe_y = wardrobe_train['Personality']

# Train a random forest model on each furniture category dataset using the selected features
bed_questions = bed_X.columns.tolist()
bed_features = bed_train.drop(['Personality', 'image'], axis=1).columns.tolist()
bed_model = RandomForestClassifier(n_estimators=100, random_state=42)
bed_model.fit(bed_train[bed_features], bed_train['Personality'])

chair_questions = chair_X.columns.tolist()
chair_features = chair_train.drop(['Personality', 'image'], axis=1).columns.tolist()
chair_model = RandomForestClassifier(n_estimators=100, random_state=42)
chair_model.fit(chair_train[chair_features], chair_train['Personality'])

table_questions = table_X.columns.tolist()
table_features = table_train.drop(['Personality', 'image'], axis=1).columns.tolist()
table_model = RandomForestClassifier(n_estimators=100, random_state=42)
table_model.fit(table_train[table_features], table_train['Personality'])

wardrobe_questions = wardrobe_X.columns.tolist()
wardrobe_features = wardrobe_train.drop(['Personality', 'image'], axis=1).columns.tolist()
wardrobe_model = RandomForestClassifier(n_estimators=100, random_state=42)
wardrobe_model.fit(wardrobe_train[wardrobe_features], wardrobe_train['Personality'])

# Define furniture categories and models
categories = {
    'bed': bed_model,
    'chair': chair_model,
    'table': table_model,
    'wardrobe': wardrobe_model
}

# Create an instance of the Flask class
app = Flask(__name__)

# Define API endpoint for chatbot
@app.route('/chatbot', methods=['POST'])
def chatbot():
    data = request.json
    user_input = data['input']
    questions = [data[f'question{i:02d}'] for i in range(1, 16)]
    response = furniture_chatbot(user_input, questions, data)
    return jsonify({'result': response})

# Define a function to recommend furniture items based on user's personality
def recommend_furniture(category, questions, user_responses):
    # Get the random forest model for the selected furniture category
    model = categories[category.lower()]

    # Get the training dataframe for the selected furniture category
    train_df = eval(f"{category.lower()}_train")

    # Get the feature names
    features = eval(f"{category.lower()}_features")

    # Use the model to predict the user's personality based on their answers to the questions
    personality = model.predict(user_responses.values.reshape(1, -1))[0]

    # Recommend furniture items that match the user's personality
    furniture_items = train_df.loc[train_df['Personality'] == personality, 'image'].tolist()

    # Convert the furniture items to strings
    furniture_items = [str(item) for item in furniture_items]

    # Remove duplicate furniture items
    furniture_items = list(set(furniture_items))

    # Limit the number of recommended furniture items to 5
    furniture_items = furniture_items[:5]

   # Return the recommended furniture items as a string
    return ', '.join(str(item) for item in furniture_items)

# Define the chatbot function
def furniture_chatbot(user_input, questions, data):
    category = user_input.lower().strip()
    user_responses = []

    # Check if user wants to quit
    if category == 'quit':
        return "Goodbye!"

    # Check if user input is valid
    if category not in categories.keys():
        return "Sorry, I don't recognize that furniture category. Please try again."

    # Get user's personality traits
    for i, question in enumerate(questions):
        answer = question
        if answer in ['1', '2', '3', '-1', '-2', '-3']:
            user_responses.append(int(answer))
        else:
            return "Sorry, I didn't understand your answer. Please answer with '1', '2', '3', '-1', '-2', or '-3'."

    # Convert user responses to a dataframe
    user_responses = pd.DataFrame([user_responses], columns=questions)

    # Call the recommend_furniture function to get recommendations
    recommendations = recommend_furniture(category, questions, user_responses)
    return recommendations

# Run the Flask application
if __name__ == '__main__':
    app.run()


